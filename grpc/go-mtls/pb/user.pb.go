// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	user.proto

It has these top-level messages:
	User
	MetadataRequest
	MetadataResponse
	UserRequest
	UserResponse
	GetUserRequest
	GetAllUsersRequest
	UploadPhotoRequest
	UploadPhotoResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User_UserType int32

const (
	User_FREE    User_UserType = 0
	User_PREMIUM User_UserType = 1
)

var User_UserType_name = map[int32]string{
	0: "FREE",
	1: "PREMIUM",
}
var User_UserType_value = map[string]int32{
	"FREE":    0,
	"PREMIUM": 1,
}

func (x User_UserType) String() string {
	return proto.EnumName(User_UserType_name, int32(x))
}
func (User_UserType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type User struct {
	Id       int32         `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Username string        `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Email    string        `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Type     User_UserType `protobuf:"varint,4,opt,name=type,enum=User_UserType" json:"type,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetType() User_UserType {
	if m != nil {
		return m.Type
	}
	return User_FREE
}

type MetadataRequest struct {
}

func (m *MetadataRequest) Reset()                    { *m = MetadataRequest{} }
func (m *MetadataRequest) String() string            { return proto.CompactTextString(m) }
func (*MetadataRequest) ProtoMessage()               {}
func (*MetadataRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type MetadataResponse struct {
}

func (m *MetadataResponse) Reset()                    { *m = MetadataResponse{} }
func (m *MetadataResponse) String() string            { return proto.CompactTextString(m) }
func (*MetadataResponse) ProtoMessage()               {}
func (*MetadataResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type UserRequest struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *UserRequest) Reset()                    { *m = UserRequest{} }
func (m *UserRequest) String() string            { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()               {}
func (*UserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UserRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type UserResponse struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *UserResponse) Reset()                    { *m = UserResponse{} }
func (m *UserResponse) String() string            { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()               {}
func (*UserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type GetUserRequest struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetUserRequest) Reset()                    { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()               {}
func (*GetUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetUserRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetAllUsersRequest struct {
}

func (m *GetAllUsersRequest) Reset()                    { *m = GetAllUsersRequest{} }
func (m *GetAllUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAllUsersRequest) ProtoMessage()               {}
func (*GetAllUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type UploadPhotoRequest struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *UploadPhotoRequest) Reset()                    { *m = UploadPhotoRequest{} }
func (m *UploadPhotoRequest) String() string            { return proto.CompactTextString(m) }
func (*UploadPhotoRequest) ProtoMessage()               {}
func (*UploadPhotoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UploadPhotoRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type UploadPhotoResponse struct {
	Done bool `protobuf:"varint,1,opt,name=done" json:"done,omitempty"`
}

func (m *UploadPhotoResponse) Reset()                    { *m = UploadPhotoResponse{} }
func (m *UploadPhotoResponse) String() string            { return proto.CompactTextString(m) }
func (*UploadPhotoResponse) ProtoMessage()               {}
func (*UploadPhotoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UploadPhotoResponse) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func init() {
	proto.RegisterType((*User)(nil), "User")
	proto.RegisterType((*MetadataRequest)(nil), "MetadataRequest")
	proto.RegisterType((*MetadataResponse)(nil), "MetadataResponse")
	proto.RegisterType((*UserRequest)(nil), "UserRequest")
	proto.RegisterType((*UserResponse)(nil), "UserResponse")
	proto.RegisterType((*GetUserRequest)(nil), "GetUserRequest")
	proto.RegisterType((*GetAllUsersRequest)(nil), "GetAllUsersRequest")
	proto.RegisterType((*UploadPhotoRequest)(nil), "UploadPhotoRequest")
	proto.RegisterType((*UploadPhotoResponse)(nil), "UploadPhotoResponse")
	proto.RegisterEnum("User_UserType", User_UserType_name, User_UserType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserService service

type UserServiceClient interface {
	SendMetadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetAllUsers(ctx context.Context, in *GetAllUsersRequest, opts ...grpc.CallOption) (UserService_GetAllUsersClient, error)
	SaveUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	SaveAllUsers(ctx context.Context, opts ...grpc.CallOption) (UserService_SaveAllUsersClient, error)
	UploadPhoto(ctx context.Context, opts ...grpc.CallOption) (UserService_UploadPhotoClient, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) SendMetadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error) {
	out := new(MetadataResponse)
	err := grpc.Invoke(ctx, "/UserService/SendMetadata", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := grpc.Invoke(ctx, "/UserService/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllUsers(ctx context.Context, in *GetAllUsersRequest, opts ...grpc.CallOption) (UserService_GetAllUsersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UserService_serviceDesc.Streams[0], c.cc, "/UserService/GetAllUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetAllUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_GetAllUsersClient interface {
	Recv() (*UserResponse, error)
	grpc.ClientStream
}

type userServiceGetAllUsersClient struct {
	grpc.ClientStream
}

func (x *userServiceGetAllUsersClient) Recv() (*UserResponse, error) {
	m := new(UserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) SaveUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := grpc.Invoke(ctx, "/UserService/SaveUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SaveAllUsers(ctx context.Context, opts ...grpc.CallOption) (UserService_SaveAllUsersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UserService_serviceDesc.Streams[1], c.cc, "/UserService/SaveAllUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceSaveAllUsersClient{stream}
	return x, nil
}

type UserService_SaveAllUsersClient interface {
	Send(*UserRequest) error
	Recv() (*UserResponse, error)
	grpc.ClientStream
}

type userServiceSaveAllUsersClient struct {
	grpc.ClientStream
}

func (x *userServiceSaveAllUsersClient) Send(m *UserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceSaveAllUsersClient) Recv() (*UserResponse, error) {
	m := new(UserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) UploadPhoto(ctx context.Context, opts ...grpc.CallOption) (UserService_UploadPhotoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UserService_serviceDesc.Streams[2], c.cc, "/UserService/UploadPhoto", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceUploadPhotoClient{stream}
	return x, nil
}

type UserService_UploadPhotoClient interface {
	Send(*UploadPhotoRequest) error
	CloseAndRecv() (*UploadPhotoResponse, error)
	grpc.ClientStream
}

type userServiceUploadPhotoClient struct {
	grpc.ClientStream
}

func (x *userServiceUploadPhotoClient) Send(m *UploadPhotoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceUploadPhotoClient) CloseAndRecv() (*UploadPhotoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadPhotoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for UserService service

type UserServiceServer interface {
	SendMetadata(context.Context, *MetadataRequest) (*MetadataResponse, error)
	GetUser(context.Context, *GetUserRequest) (*UserResponse, error)
	GetAllUsers(*GetAllUsersRequest, UserService_GetAllUsersServer) error
	SaveUser(context.Context, *UserRequest) (*UserResponse, error)
	SaveAllUsers(UserService_SaveAllUsersServer) error
	UploadPhoto(UserService_UploadPhotoServer) error
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_SendMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SendMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserService/SendMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SendMetadata(ctx, req.(*MetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).GetAllUsers(m, &userServiceGetAllUsersServer{stream})
}

type UserService_GetAllUsersServer interface {
	Send(*UserResponse) error
	grpc.ServerStream
}

type userServiceGetAllUsersServer struct {
	grpc.ServerStream
}

func (x *userServiceGetAllUsersServer) Send(m *UserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_SaveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SaveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserService/SaveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SaveUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SaveAllUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).SaveAllUsers(&userServiceSaveAllUsersServer{stream})
}

type UserService_SaveAllUsersServer interface {
	Send(*UserResponse) error
	Recv() (*UserRequest, error)
	grpc.ServerStream
}

type userServiceSaveAllUsersServer struct {
	grpc.ServerStream
}

func (x *userServiceSaveAllUsersServer) Send(m *UserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceSaveAllUsersServer) Recv() (*UserRequest, error) {
	m := new(UserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_UploadPhoto_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).UploadPhoto(&userServiceUploadPhotoServer{stream})
}

type UserService_UploadPhotoServer interface {
	SendAndClose(*UploadPhotoResponse) error
	Recv() (*UploadPhotoRequest, error)
	grpc.ServerStream
}

type userServiceUploadPhotoServer struct {
	grpc.ServerStream
}

func (x *userServiceUploadPhotoServer) SendAndClose(m *UploadPhotoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceUploadPhotoServer) Recv() (*UploadPhotoRequest, error) {
	m := new(UploadPhotoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMetadata",
			Handler:    _UserService_SendMetadata_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "SaveUser",
			Handler:    _UserService_SaveUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllUsers",
			Handler:       _UserService_GetAllUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SaveAllUsers",
			Handler:       _UserService_SaveAllUsers_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadPhoto",
			Handler:       _UserService_UploadPhoto_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "user.proto",
}

func init() { proto.RegisterFile("user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x41, 0xaf, 0x93, 0x40,
	0x10, 0xc7, 0x5d, 0xa4, 0x3e, 0x1c, 0x90, 0xc7, 0x9b, 0xf6, 0x80, 0x9c, 0x70, 0x2f, 0xd2, 0xcb,
	0xfa, 0xd2, 0xde, 0xbc, 0x69, 0x52, 0x5f, 0x3c, 0x34, 0x79, 0xd9, 0xda, 0x8b, 0x37, 0x2a, 0x93,
	0x48, 0x42, 0x01, 0x61, 0xdb, 0xa4, 0x9f, 0xc2, 0xaf, 0xe3, 0xc7, 0x33, 0xbb, 0x94, 0xda, 0x52,
	0xd3, 0x0b, 0xd9, 0x9d, 0xfd, 0xcd, 0x7f, 0xe6, 0xff, 0x0f, 0x00, 0xbb, 0x96, 0x1a, 0x51, 0x37,
	0x95, 0xaa, 0xf8, 0x6f, 0x06, 0xf6, 0xba, 0xa5, 0x06, 0x7d, 0xb0, 0xf2, 0x2c, 0x64, 0x31, 0x4b,
	0x46, 0xd2, 0xca, 0x33, 0x8c, 0xc0, 0xd1, 0x58, 0x99, 0x6e, 0x29, 0xb4, 0x62, 0x96, 0xbc, 0x96,
	0xa7, 0x3b, 0x4e, 0x60, 0x44, 0xdb, 0x34, 0x2f, 0xc2, 0x97, 0xe6, 0xa1, 0xbb, 0x20, 0x07, 0x5b,
	0x1d, 0x6a, 0x0a, 0xed, 0x98, 0x25, 0xfe, 0xcc, 0x17, 0x5a, 0xd6, 0x7c, 0xbe, 0x1d, 0x6a, 0x92,
	0xe6, 0x8d, 0xbf, 0x03, 0xa7, 0xaf, 0xa0, 0x03, 0xf6, 0x17, 0xb9, 0x58, 0x04, 0x2f, 0xd0, 0x85,
	0xbb, 0x67, 0xb9, 0x58, 0x7e, 0x5d, 0x2f, 0x03, 0xc6, 0x1f, 0xe0, 0x7e, 0x49, 0x2a, 0xcd, 0x52,
	0x95, 0x4a, 0xfa, 0xb5, 0xa3, 0x56, 0x71, 0x84, 0xe0, 0x5f, 0xa9, 0xad, 0xab, 0xb2, 0x25, 0x9e,
	0x80, 0xab, 0x95, 0x8e, 0x08, 0xbe, 0x05, 0x5b, 0xaf, 0x67, 0x0c, 0xb8, 0xb3, 0x91, 0x99, 0x2b,
	0x4d, 0x89, 0x4f, 0xc1, 0xeb, 0xc8, 0xae, 0xf3, 0x16, 0x1a, 0x83, 0xff, 0x44, 0xea, 0x5c, 0x77,
	0x10, 0x0b, 0x9f, 0x00, 0x3e, 0x91, 0xfa, 0x54, 0x14, 0x1a, 0x6a, 0xfb, 0x05, 0x13, 0xc0, 0x75,
	0x5d, 0x54, 0x69, 0xf6, 0xfc, 0xb3, 0x52, 0x55, 0xdf, 0x8b, 0x60, 0xeb, 0x95, 0x4d, 0xb7, 0x27,
	0xcd, 0x99, 0x4f, 0x61, 0x7c, 0x41, 0x1e, 0x77, 0xd2, 0x68, 0x55, 0x92, 0x41, 0x1d, 0x69, 0xce,
	0xb3, 0x3f, 0x56, 0x67, 0x71, 0x45, 0xcd, 0x3e, 0xff, 0x41, 0x38, 0x07, 0x6f, 0x45, 0x65, 0xd6,
	0x27, 0x81, 0x81, 0x18, 0xe4, 0x14, 0x3d, 0x88, 0x61, 0x4c, 0x38, 0x85, 0xbb, 0xa3, 0x23, 0xbc,
	0x17, 0x97, 0xde, 0xa2, 0x37, 0xe2, 0x22, 0x97, 0x39, 0xb8, 0x67, 0xd6, 0x70, 0x2c, 0xae, 0x8d,
	0x0e, 0x5a, 0x1e, 0x19, 0xbe, 0x07, 0x67, 0x95, 0xee, 0xc9, 0x0c, 0xf0, 0xc4, 0x0d, 0xf5, 0x0f,
	0xe0, 0x69, 0xf0, 0x24, 0x7f, 0x0b, 0x4e, 0xd8, 0x23, 0xc3, 0x8f, 0xe0, 0x9e, 0x25, 0x85, 0x63,
	0x71, 0x9d, 0x70, 0x34, 0x11, 0xff, 0x09, 0x33, 0x61, 0x9f, 0xed, 0xef, 0x56, 0xbd, 0xd9, 0xbc,
	0x32, 0xbf, 0xf8, 0xfc, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbc, 0xb6, 0x28, 0x28, 0xf0, 0x02,
	0x00, 0x00,
}
